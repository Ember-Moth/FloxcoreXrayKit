# go/Makefile

ARCHS ?= arm64
EFFECTIVE_PLATFORM_NAME ?=
PLATFORM_NAME ?= macosx
TARGET_DEVICE_PLATFORM_NAME ?=
SDKROOT ?= $(shell xcrun --sdk $(PLATFORM_NAME) --show-sdk-path)
CONFIGURATION_BUILD_DIR ?= $(CURDIR)/out
CONFIGURATION_TEMP_DIR ?= $(CURDIR)/.tmp
export PATH := $(PATH):/usr/local/bin:/opt/homebrew/bin
export CC ?= clang
LIPO ?= lipo
DESTDIR ?= $(CONFIGURATION_BUILD_DIR)
PACKAGEDIR ?= $(DESTDIR)/XrayKit
XCFRAMEWORKDIR = LibXray.xcframework
BUILDDIR ?= $(CONFIGURATION_TEMP_DIR)/libxray-go-bridge

build: detect_platform

export REAL_GOROOT ?= $(shell PATH=$(PATH) go env GOROOT 2>/dev/null)
export GOROOT := $(BUILDDIR)/goroot
$(GOROOT)/.prepared:
	[ -n "$(REAL_GOROOT)" ]
	rm -rf "$(GOROOT)"
	mkdir -p "$(GOROOT)"
	mkdir -p "$(DESTDIR)"
	rsync -a --delete --exclude=pkg/obj/go-build "$(REAL_GOROOT)/" "$(GOROOT)/"
	touch "$@"

# MacCatalyst arm64
$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: export CGO_ENABLED := 1
$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: export SDKROOT := $(shell xcrun --sdk macosx --show-sdk-path)
$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: CFLAGS := -target arm64-apple-ios16.0-macabi -isysroot $(SDKROOT) -arch arm64
$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: export CGO_CFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: export CGO_LDFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: export GOOS := ios
$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: export GOARCH := arm64
$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: $(GOROOT)/.prepared go.mod
	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-maccatalyst-arm64.a" -buildmode c-archive ./main
	#go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-maccatalyst-arm64.a" -tags=ios -buildmode c-archive ./main

# MacCatalyst x86_64
$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: export CGO_ENABLED := 1
$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: export SDKROOT := $(shell xcrun --sdk macosx --show-sdk-path)
$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: CFLAGS := -target x86_64-apple-ios16.0-macabi -isysroot $(SDKROOT) -arch x86_64
$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: export CGO_CFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: export CGO_LDFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: export GOOS := ios
$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: export GOARCH := amd64
$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: $(GOROOT)/.prepared go.mod
	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a" -buildmode c-archive ./main
	#go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a" -tags=ios -buildmode c-archive ./main

# iPhoneOS arm64
$(BUILDDIR)/libxray-go-iphoneos-arm64.a: export CGO_ENABLED := 1
$(BUILDDIR)/libxray-go-iphoneos-arm64.a: export SDKROOT := $(shell xcrun --sdk iphoneos --show-sdk-path)
$(BUILDDIR)/libxray-go-iphoneos-arm64.a: CFLAGS := -miphoneos-version-min=16.0 -isysroot $(SDKROOT) -arch arm64
$(BUILDDIR)/libxray-go-iphoneos-arm64.a: export CGO_CFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-iphoneos-arm64.a: export CGO_LDFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-iphoneos-arm64.a: export GOOS := ios
$(BUILDDIR)/libxray-go-iphoneos-arm64.a: export GOARCH := arm64
$(BUILDDIR)/libxray-go-iphoneos-arm64.a: $(GOROOT)/.prepared go.mod
	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-iphoneos-arm64.a" -buildmode c-archive ./main

# AppleTVOS arm64
$(BUILDDIR)/libxray-go-appletvos-arm64.a: export CGO_ENABLED := 1
$(BUILDDIR)/libxray-go-appletvos-arm64.a: export SDKROOT := $(shell xcrun --sdk appletvos --show-sdk-path)
$(BUILDDIR)/libxray-go-appletvos-arm64.a: CFLAGS := -target arm64-apple-tvos17.0 -isysroot $(SDKROOT) -arch arm64
$(BUILDDIR)/libxray-go-appletvos-arm64.a: export CGO_CFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-appletvos-arm64.a: export CGO_LDFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-appletvos-arm64.a: export GOOS := ios
$(BUILDDIR)/libxray-go-appletvos-arm64.a: export GOARCH := arm64
$(BUILDDIR)/libxray-go-appletvos-arm64.a: $(GOROOT)/.prepared go.mod
	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-appletvos-arm64.a" -buildmode c-archive ./main

# AppleTV Simulator x86_64
$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: export CGO_ENABLED := 1
$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: export SDKROOT := $(shell xcrun --sdk appletvsimulator --show-sdk-path)
$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: CFLAGS := -target x86_64-apple-tvos17.0-simulator -isysroot $(SDKROOT) -arch x86_64
$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: export CGO_CFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: export CGO_LDFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: export GOOS := ios
$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: export GOARCH := amd64
$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: $(GOROOT)/.prepared go.mod
	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a" -buildmode c-archive ./main

# AppleTV Simulator arm64
$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: export CGO_ENABLED := 1
$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: export SDKROOT := $(shell xcrun --sdk appletvsimulator --show-sdk-path)
$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: CFLAGS := -target arm64-apple-tvos17.0-simulator -isysroot $(SDKROOT) -arch arm64
$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: export CGO_CFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: export CGO_LDFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: export GOOS := ios
$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: export GOARCH := arm64
$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: $(GOROOT)/.prepared go.mod
	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a" -buildmode c-archive ./main

# iPhone Simulator x86_64
$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: export CGO_ENABLED := 1
$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: export SDKROOT := $(shell xcrun --sdk iphonesimulator --show-sdk-path)
$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: CFLAGS := -target x86_64-apple-ios16.0-simulator -isysroot $(SDKROOT) -arch x86_64
$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: export CGO_CFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: export CGO_LDFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: export GOOS := ios
$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: export GOARCH := amd64
$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: $(GOROOT)/.prepared go.mod
	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a" -buildmode c-archive ./main

# iPhone Simulator arm64
$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: export CGO_ENABLED := 1
$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: export SDKROOT := $(shell xcrun --sdk iphonesimulator --show-sdk-path)
$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: CFLAGS := -target arm64-apple-ios16.0-simulator -isysroot $(SDKROOT) -arch arm64
$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: export CGO_CFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: export CGO_LDFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: export GOOS := ios
$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: export GOARCH := arm64
$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: $(GOROOT)/.prepared go.mod
	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a" -buildmode c-archive ./main

# MacOSX x86_64
$(BUILDDIR)/libxray-go-macosx-x86_64.a: export CGO_ENABLED := 1
$(BUILDDIR)/libxray-go-macosx-x86_64.a: export SDKROOT := $(shell xcrun --sdk macosx --show-sdk-path)
$(BUILDDIR)/libxray-go-macosx-x86_64.a: export CFLAGS := -isysroot $(shell xcrun --sdk macosx --show-sdk-path) -arch x86_64
$(BUILDDIR)/libxray-go-macosx-x86_64.a: export CC := /usr/bin/clang $(CFLAGS)
$(BUILDDIR)/libxray-go-macosx-x86_64.a: export CGO_CFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-macosx-x86_64.a: export CGO_LDFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-macosx-x86_64.a: export GOOS := darwin
$(BUILDDIR)/libxray-go-macosx-x86_64.a: export GOARCH := amd64
$(BUILDDIR)/libxray-go-macosx-x86_64.a: $(GOROOT)/.prepared go.mod
	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-macosx-x86_64.a" -buildmode c-archive ./main

# MacOSX arm64
$(BUILDDIR)/libxray-go-macosx-arm64.a: export CGO_ENABLED := 1
$(BUILDDIR)/libxray-go-macosx-arm64.a: export SDKROOT := $(shell xcrun --sdk macosx --show-sdk-path)
$(BUILDDIR)/libxray-go-macosx-arm64.a: CFLAGS := -isysroot $(shell xcrun --sdk macosx --show-sdk-path) -arch arm64
$(BUILDDIR)/libxray-go-macosx-arm64.a: export CC := clang $(CFLAGS)
$(BUILDDIR)/libxray-go-macosx-arm64.a: export CGO_CFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-macosx-arm64.a: export CGO_LDFLAGS := $(CFLAGS)
$(BUILDDIR)/libxray-go-macosx-arm64.a: export GOOS := darwin
$(BUILDDIR)/libxray-go-macosx-arm64.a: export GOARCH := arm64
$(BUILDDIR)/libxray-go-macosx-arm64.a: $(GOROOT)/.prepared go.mod
	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-macosx-arm64.a" -buildmode c-archive ./main

$(DESTDIR)/iPhoneOS/libxray.a: $(BUILDDIR)/libxray-go-iphoneos-arm64.a
	mkdir -p $(dir $@)
	$(LIPO) -create -output $@ $^

$(DESTDIR)/AppleTVOS/libxray.a: $(BUILDDIR)/libxray-go-appletvos-arm64.a
	mkdir -p $(dir $@)
	$(LIPO) -create -output $@ $^

$(DESTDIR)/iPhoneSimulator/libxray.a: $(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a $(BUILDDIR)/libxray-go-iphonesimulator-arm64.a
	mkdir -p $(dir $@)
	$(LIPO) -create -output $@ $^

$(DESTDIR)/AppleTVSimulator/libxray.a: $(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a $(BUILDDIR)/libxray-go-appletvsimulator-arm64.a
	mkdir -p $(dir $@)
	$(LIPO) -create -output $@ $^

$(DESTDIR)/MacCatalyst/libxray.a: $(BUILDDIR)/libxray-go-maccatalyst-x86_64.a $(BUILDDIR)/libxray-go-maccatalyst-arm64.a
	mkdir -p $(dir $@)
	$(LIPO) -create -output $@ $^

$(DESTDIR)/MacOSX/libxray.a: $(BUILDDIR)/libxray-go-macosx-x86_64.a $(BUILDDIR)/libxray-go-macosx-arm64.a
	mkdir -p $(dir $@)
	$(LIPO) -create -output $@ $^

appletvos: $(DESTDIR)/AppleTVOS/libxray.a
	rm -rf "$(PACKAGEDIR)"
	mkdir -p "$(PACKAGEDIR)/xcframeworks"
	rm -rf "$(BUILDDIR)/headers"
	mkdir -p "$(BUILDDIR)/headers/xraykit"
	cp "$(BUILDDIR)/libxray-go-appletvos-arm64.h" "$(BUILDDIR)/headers/xraykit/libxray-go.h"
	cp ../tools/module.modulemap "$(BUILDDIR)/headers/xraykit"
	xcodebuild -create-xcframework -library $^ -headers "$(BUILDDIR)/headers" -output "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)/tvos-arm64"
	cp "../../Templates/Package.appletv.template" "$(PACKAGEDIR)/Package.swift"
	cp -r "../../Sources" "$(PACKAGEDIR)/"
	cp "../../README.md" "$(PACKAGEDIR)/"

appletvsimulator: $(DESTDIR)/AppleTVSimulator/libxray.a
	rm -rf "$(PACKAGEDIR)"
	mkdir -p "$(PACKAGEDIR)/xcframeworks"
	rm -rf "$(BUILDDIR)/headers"
	mkdir -p "$(BUILDDIR)/headers/xraykit"
	cp "$(BUILDDIR)/libxray-go-appletvsimulator-arm64.h" "$(BUILDDIR)/headers/xraykit/libxray-go.h"
	cp ../tools/module.modulemap "$(BUILDDIR)/headers/xraykit"
	xcodebuild -create-xcframework -library $^ -headers "$(BUILDDIR)/headers" -output "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)/tvos-arm64_x86_64-simulator"
	cp "../../Templates/Package.appletv.template" "$(PACKAGEDIR)/Package.swift"
	cp -r "../../Sources" "$(PACKAGEDIR)/"
	cp "../../README.md" "$(PACKAGEDIR)/"

iphoneos: $(DESTDIR)/iPhoneOS/libxray.a
	rm -rf "$(PACKAGEDIR)"
	mkdir -p "$(PACKAGEDIR)/xcframeworks"
	rm -rf "$(BUILDDIR)/headers"
	mkdir -p "$(BUILDDIR)/headers/xraykit"
	cp "$(BUILDDIR)/libxray-go-iphoneos-arm64.h" "$(BUILDDIR)/headers/xraykit/libxray-go.h"
	cp ../tools/module.modulemap "$(BUILDDIR)/headers/xraykit"
	xcodebuild -create-xcframework -library $^ -headers "$(BUILDDIR)/headers" -output "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)/ios-arm64"
	cp "../../Templates/Package.ios.template" "$(PACKAGEDIR)/Package.swift"
	cp -r "../../Sources" "$(PACKAGEDIR)/"
	cp "../../README.md" "$(PACKAGEDIR)/"

iphonesimulator: $(DESTDIR)/iPhoneSimulator/libxray.a
	rm -rf "$(PACKAGEDIR)"
	mkdir -p "$(PACKAGEDIR)/xcframeworks"
	rm -rf "$(BUILDDIR)/headers"
	mkdir -p "$(BUILDDIR)/headers/xraykit"
	cp "$(BUILDDIR)/libxray-go-iphonesimulator-arm64.h" "$(BUILDDIR)/headers/xraykit/libxray-go.h"
	cp ../tools/module.modulemap "$(BUILDDIR)/headers/xraykit"
	xcodebuild -create-xcframework -library $^ -headers "$(BUILDDIR)/headers" -output "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)/ios-arm64_x86_64-simulator"
	cp "../../Templates/Package.ios.template" "$(PACKAGEDIR)/Package.swift"
	cp -r "../../Sources" "$(PACKAGEDIR)/"
	cp "../../README.md" "$(PACKAGEDIR)/"

maccatalyst: $(DESTDIR)/MacCatalyst/libxray.a
	rm -rf "$(PACKAGEDIR)"
	mkdir -p "$(PACKAGEDIR)/xcframeworks"
	rm -rf "$(BUILDDIR)/headers"
	mkdir -p "$(BUILDDIR)/headers/xraykit"
	cp "$(BUILDDIR)/libxray-go-maccatalyst-arm64.h" "$(BUILDDIR)/headers/xraykit/libxray-go.h"
	cp ../tools/module.modulemap "$(BUILDDIR)/headers/xraykit"
	xcodebuild -create-xcframework -library $^ -headers "$(BUILDDIR)/headers" -output "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)"
	mkdir -p "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)/ios-arm64_x86_64-maccatalyst/Versions/A/Resources"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)/ios-arm64_x86_64-maccatalyst/Versions/A/Resources/"
	cp "../../Templates/Package.maccatalyst.template" "$(PACKAGEDIR)/Package.swift"
	cp -r "../../Sources" "$(PACKAGEDIR)/"
	cp "../../README.md" "$(PACKAGEDIR)/"

macosx: $(DESTDIR)/MacOSX/libxray.a
	rm -rf "$(PACKAGEDIR)"
	mkdir -p "$(PACKAGEDIR)/xcframeworks"
	rm -rf "$(BUILDDIR)/headers"
	mkdir -p "$(BUILDDIR)/headers/xraykit"
	cp "$(BUILDDIR)/libxray-go-macosx-arm64.h" "$(BUILDDIR)/headers/xraykit/libxray-go.h"
	cp ../tools/module.modulemap "$(BUILDDIR)/headers/xraykit"
	xcodebuild -create-xcframework -library $^ -headers "$(BUILDDIR)/headers" -output "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)"
	mkdir -p "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)/macos-arm64_x86_64/Versions/A/Resources"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)/macos-arm64_x86_64/Versions/A/Resources/"
	cp "../../Templates/Package.macos.template" "$(PACKAGEDIR)/Package.swift"
	cp -r "../../Sources" "$(PACKAGEDIR)/"
	cp "../../README.md" "$(PACKAGEDIR)/"

default: $(PACKAGEDIR)

all: $(PACKAGEDIR)

$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR): $(DESTDIR)/iPhoneOS/libxray.a $(DESTDIR)/iPhoneSimulator/libxray.a $(DESTDIR)/AppleTVSimulator/libxray.a $(DESTDIR)/MacCatalyst/libxray.a $(DESTDIR)/MacOSX/libxray.a $(DESTDIR)/AppleTVOS/libxray.a
	rm -rf "$@"
	mkdir -p "$@"
	rm -rf "$(BUILDDIR)/headers"
	mkdir -p "$(BUILDDIR)/headers/xraykit"
	cp "$(BUILDDIR)/libxray-go-macosx-arm64.h" "$(BUILDDIR)/headers/xraykit/libxray-go.h"
	cp ../tools/module.modulemap "$(BUILDDIR)/headers/xraykit"
	xcodebuild -create-xcframework \
		-output "$@" \
		-library "$(DESTDIR)/iPhoneOS/libxray.a" -headers "$(BUILDDIR)/headers" \
		-library "$(DESTDIR)/iPhoneSimulator/libxray.a" -headers "$(BUILDDIR)/headers" \
		-library "$(DESTDIR)/AppleTVSimulator/libxray.a" -headers "$(BUILDDIR)/headers" \
		-library "$(DESTDIR)/AppleTVOS/libxray.a" -headers "$(BUILDDIR)/headers" \
		-library "$(DESTDIR)/MacCatalyst/libxray.a" -headers "$(BUILDDIR)/headers" \
		-library "$(DESTDIR)/MacOSX/libxray.a" -headers "$(BUILDDIR)/headers"
	mkdir -p "$@/macos-arm64_x86_64/Versions/A/Resources"
	cp ../tools/PrivacyInfo.xcprivacy "$@/macos-arm64_x86_64/Versions/A/Resources/"
	mkdir -p "$@/ios-arm64_x86_64-maccatalyst/Versions/A/Resources"
	cp ../tools/PrivacyInfo.xcprivacy "$@/ios-arm64_x86_64-maccatalyst/Versions/A/Resources/"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)/ios-arm64_x86_64-simulator"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)/ios-arm64"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)/tvos-arm64_x86_64-simulator"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)/tvos-arm64"
	cp "../../Templates/Package.local.template" "$(PACKAGEDIR)/Package.swift"
	cp -r "../../Sources" "$(PACKAGEDIR)/"
	cp "../../README.md" "$(PACKAGEDIR)/"

$(PACKAGEDIR): $(PACKAGEDIR)/xcframeworks/$(XCFRAMEWORKDIR)

detect_platform:
	@if [ "$(TARGET_DEVICE_PLATFORM_NAME)" = "iphoneos" ]; then \
		$(MAKE) iphoneos; \
	elif [ "$(TARGET_DEVICE_PLATFORM_NAME)" = "iphonesimulator" ]; then \
		$(MAKE) iphonesimulator; \
	elif [ "$(TARGET_DEVICE_PLATFORM_NAME)" = "appletvsimulator" ]; then \
		$(MAKE) iphonesimulator; \
	elif [ "$(PLATFORM_NAME)" = "macosx" ]; then \
		if [ "$(EFFECTIVE_PLATFORM_NAME)" = "-maccatalyst" ]; then \
			$(MAKE) maccatalyst; \
		else \
			$(MAKE) macosx; \
		fi; \
	fi

clean:
	rm -rf "$(BUILDDIR)" "$(PACKAGEDIR)" "$(DESTDIR)/libxray*" "$(DESTDIR)/iPhoneOS" "$(DESTDIR)/iPhoneSimulator/" "$(DESTDIR)/AppleTVSimulator" "$(DESTDIR)/MacCatalyst" "$(DESTDIR)/MacOSX" "$(DESTDIR)/AppleTVOS"

install: build

.PHONY: clean build install all ios appletvsimulator iphoneos iphonesimulator maccatalyst macosx detect_platform
